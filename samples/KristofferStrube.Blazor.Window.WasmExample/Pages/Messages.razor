@page "/Messages"
@using KristofferStrube.Blazor.DOM
@inject IWindowService WindowService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Blazor Window - Messages</PageTitle>

<h2>Messages</h2>

<p>
    Different windows can send messages to each other if they are related.
    This includes active windows from the same domain, service workers associated to the same domain, and windows hosted by other windows like pop-ups and iframes.
    <br />
    On this page we have subscribed to messages posted to this window and any other windows that it will host.
    You then have the option to post an event from the same window or open a pop-up and post an event from there.
</p>

<label for="message">Message: </label>
<input @bind=message id="message" class="form-control" />
<br />
<button @onclick=PostMessage class="btn btn-primary">Post</button>
<button @onclick=OpenPopup class="btn btn-primary">Open Pop-up</button>

@if (messageLogs.Count is not 0)
{
    <br />
    <br />
    <div style="background:#eee;border:1px black solid;padding:5px;">
        @foreach (LogEntry log in messageLogs)
        {
            <div>
                <small><b>Origin: </b>@log.origin</small>
                <br />
                @log.message
                <hr />
            </div>
        }
    </div>
}

@code {
    string message = "My Message";
    List<LogEntry> messageLogs = new();
    int popupCount = 1;

    Window window = default!;
    Window? popup;
    EventListener<MessageEvent> messageEventListener = default!;

    protected override async Task OnInitializedAsync()
    {
        window = await WindowService.GetWindowAsync();
        messageEventListener = await EventListener<MessageEvent>.CreateAsync(JSRuntime, async e =>
        {
            messageLogs.Add(await LogEntry.CreateAsync(e));
            StateHasChanged();
        });
        await window.AddOnMessageEventListenerAsync(messageEventListener);
    }

    private async Task PostMessage()
    {
        await window.PostMessageAsync($"From Window \"{message}\"");
    }

    private async Task OpenPopup()
    {
        popup = await window.OpenAsync($"?popup={popupCount++}", features: "popup=true");
        if (popup is not null)
        {
            await popup.AddOnMessageEventListenerAsync(messageEventListener);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await window.RemoveOnMessageEventListenerAsync(messageEventListener);
        if (popup is not null)
        {
            await popup.RemoveOnMessageEventListenerAsync(messageEventListener);
            await popup.DisposeAsync();
        }
        await messageEventListener.DisposeAsync();
    }

    public record LogEntry(string message, string origin)
    {
        public static async Task<LogEntry> CreateAsync(MessageEvent e) =>
            new(await e.GetDataAsync<string>(), await e.GetOriginAsync());
    }
}